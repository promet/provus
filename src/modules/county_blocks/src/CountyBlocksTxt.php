<?php

/**
 * @file
 * Process strings to ASCII text.
 *
 * @codingStandardsIgnoreFile
 */

namespace Drupal\county_blocks;

/**
 * Translate to ASCII text.
 */
class CountyBlocksTxt {

  /**
   * Apply all filters to translate string to similar ASCII characters.
   *
   * @param string $txt
   *   Text string.
   *
   * @return string
   *   An ASCII text string.
   */
  public static function toAscii($txt) {
    $txt = self::filter($txt, 'hex');
    $txt = self::filter($txt, 'entity');
    $txt = self::filter($txt, 'html');

    return preg_replace('/[^[:print:]]/', '', $txt);
  }

  /**
   * Replace numerical HTML encoding with similar ASCII characters.
   *
   * @param string $txt
   *   Text field.
   *
   * @return string
   *   An ASCII text string.
   */
  public static function filter($txt, $filter) {
    switch ($filter) {
      case 'entity':
        $x = self::xEntity();
        break;

      case 'hex':
        $x = self::xHex();
        break;

      case 'html':
        $x = self::xHtml();
        break;

      case 'xml':
        $x = self::xXml();
        break;

      default:
        $x = [];
    }
    return str_replace(array_keys($x), array_values($x), $txt);
  }

  /**
   * Create a summary from the provided text.
   *
   * @param string $string
   *   The string to trim.
   * @param int $max
   *   The target length of the string.
   * @param string $sufx
   *   The string to use at the end of a trminated string.
   *
   * @return string
   *   The provided text truncated to the requested length.
   */
  public static function filterTrim($string, $max = 150, $sufx = '') {
    $txt = '';

    foreach (preg_split('/\s+/', $string) as $atom) {
      $length = strlen($atom);

      if (($length + strlen($txt) + 1) > $max) {
        return "$txt$sufx";
      }
      $txt .= $txt ? " $atom" : $atom;
    }
    return $txt;
  }

  /**
   * Numerical HTML encoding to similar ASCII hash.
   *
   * @return array
   *   A numerical HTML encoding to similar ASCII hash.
   */
  protected static function xEntity() {
    return [
      '&#171;'  => '<<',
      '&#187;'  => '>>',
      '&#8192;' => ' ',    // U+2000
      '&#8193;' => ' ',    // U+2001
      '&#8194;' => ' ',    // U+2002
      '&#8195;' => ' ',    // U+2003
      '&#8196;' => ' ',    // U+2004
      '&#8197;' => ' ',    // U+2005
      '&#8198;' => ' ',    // U+2006
      '&#8199;' => ' ',    // U+2007
      '&#8200;' => ' ',    // U+2008
      '&#8201;' => ' ',    // U+2009
      '&#8202;' => ' ',    // U+200A
      '&#8203;' => ' ',    // U+200B
      '&#8204;' => ' ',    // U+200C
      '&#8205;' => ' ',    // U+200D
      '&#8206;' => ' ',    // U+200E
      '&#8207;' => ' ',    // U+200F
      '&#8208;' => '-',    // U+2010
      '&#8209;' => '-',    // U+2011
      '&#8210;' => '-',    // U+2012
      '&#8211;' => '-',    // U+2013
      '&#8212;' => '--',   // U+2014
      '&#8213;' => '--',   // U+2015
      '&#8214;' => '|',    // U+2016
      '&#8215;' => '_',    // U+2017
      '&#8216;' => "'",    // U+2018
      '&#8217;' => "'",    // U+2019
      '&#8218;' => "'",    // U+201A
      '&#8219;' => "'",    // U+201B
      '&#8220;' => "'",    // U+201C
      '&#8221;' => "'",    // U+201D
      '&#8222;' => "'",    // U+201E
      '&#8223;' => "'",    // U+201F
      '&#8224;' => '+',    // U+2020
      '&#8225;' => '+',    // U+2021
      '&#8226;' => '*',    // U+2022
      '&#8227;' => '*',    // U+2023
      '&#8228;' => '.',    // U+2024
      '&#8229;' => '..',   // U+2025
      '&#8230;' => '...',  // U+2026
      '&#8231;' => '.',    // U+2027
      '&#8232;' => ' ',    // U+2028
      '&#8233;' => ' ',    // U+2029
      '&#8234;' => ' ',    // U+202A
      '&#8235;' => ' ',    // U+202B
      '&#8236;' => ' ',    // U+202C
      '&#8237;' => ' ',    // U+202D
      '&#8238;' => ' ',    // U+202E
      '&#8239;' => ' ',    // U+202F
      '&#8240;' => '%',    // U+2030
      '&#8241;' => '%',    // U+2031
      '&#8242;' => "'",    // U+2032
      '&#8243;' => "''",   // U+2033
      '&#8244;' => "'''",  // U+2034
      '&#8245;' => "'",    // U+2035
      '&#8246;' => "''",   // U+2036
      '&#8247;' => "'''",  // U+2037
      '&#8248;' => '^',    // U+2038
      '&#8249;' => '<',    // U+2039
      '&#8250;' => '>',    // U+203A
      '&#8251;' => '*',    // U+203B
      '&#8252;' => '!!',   // U+203C
      '&#8253;' => '!?',   // U+203D
      '&#8254;' => '-',    // U+203E
      '&#8255;' => '_',    // U+203F
      '&#8256;' => '-',    // U+2040
      '&#8257;' => '^',    // U+2041
      '&#8258;' => '***',  // U+2042
      '&#8259;' => '-*',   // U+2043
      '&#8260;' => '/',    // U+2044
      '&#8261;' => '[',    // U+2045
      '&#8262;' => ']',    // U+2046
      '&#8263;' => '??',   // U+2047
      '&#8264;' => '?!',   // U+2048
      '&#8265;' => '!?',   // U+2049
      '&#8266;' => '|',    // U+204A
      '&#8267;' => '|',    // U+204B
      '&#8268;' => '*',    // U+204C
      '&#8269;' => '*',    // U+204D
      '&#8270;' => '*',    // U+204E
      '&#8271;' => ';',    // U+204F
      '&#8272;' => '^',    // U+2050
      '&#8273;' => '**',   // U+2051
      '&#8274;' => '%',    // U+2052
      '&#8275;' => '~',    // U+2053
      '&#8276;' => '_',    // U+2054
      '&#8277;' => '*',    // U+2055
      '&#8278;' => '*:',   // U+2056
      '&#8279;' => "''''", // U+2057
      '&#8280;' => '::',   // U+2058
      '&#8281;' => ':*:',  // U+2059
      '&#8282;' => ':',    // U+205A
      '&#8283;' => '*:*',  // U+205B
      '&#8284;' => '+',    // U+205C
      '&#8285;' => ':',    // U+205D
      '&#8286;' => ':',    // U+205E
      '&#8287;' => ' ',    // U+205F
      '&#8288;' => ' ',    // U+2060
      '&#8289;' => ' ',    // U+2061
      '&#8290;' => ' ',    // U+2062
      '&#8291;' => ' ',    // U+2063
      '&#8292;' => ' ',    // U+2064
      '&#8293;' => ' ',    // U+2065
      '&#8294;' => ' ',    // U+2066
      '&#8295;' => ' ',    // U+2067
      '&#8296;' => ' ',    // U+2068
      '&#8297;' => ' ',    // U+2069
      '&#8298;' => ' ',    // U+206A
      '&#8299;' => ' ',    // U+206B
      '&#8300;' => ' ',    // U+206C
      '&#8301;' => ' ',    // U+206D
      '&#8302;' => ' ',    // U+206E
      '&#8303;' => ' ',    // U+206F
      '&#8304;' => '0',    // U+2070
      '&#8305;' => 'i',    // U+2071
      '&#8306;' => '2',    // U+2072
      '&#8307;' => '3',    // U+2073
      '&#8308;' => '4',    // U+2074
      '&#8309;' => '5',    // U+2075
      '&#8310;' => '6',    // U+2076
      '&#8311;' => '7',    // U+2077
      '&#8312;' => '8',    // U+2078
      '&#8313;' => '9',    // U+2079
      '&#8314;' => '+',    // U+207A
      '&#8315;' => '-',    // U+207B
      '&#8316;' => '=',    // U+207C
      '&#8317;' => '(',    // U+207D
      '&#8318;' => ')',    // U+207E
      '&#8319;' => 'n',    // U+207F
    ];
  }

  /**
   * UTF8 to similar ASCII hash.
   *
   * @return array
   *   A UTF8 to similar ASCII hash.
   */
  protected static function xHex() {
    return [
      "\xc2\x3c"     => '<',    // U+003C
      "\xc2\x3e"     => '>',    // U+003E
      "\xc2\x21"     => '!',    // U+0021
      "\xc2\x25"     => '%',    // U+0025
      "\xc2\xab"     => '<<',   // U+00AB
      "\xc2\xae"     => '(R)',  // U+00AE
      "\xc2\xbb"     => '>>',   // U+00BB
      "\xc2\xb0"     => 'deg',  // U+00B0
      "\xe2\x80\x80" => ' ',    // U+2000
      "\xe2\x80\x81" => ' ',    // U+2001
      "\xe2\x80\x82" => ' ',    // U+2002
      "\xe2\x80\x83" => ' ',    // U+2003
      "\xe2\x80\x84" => ' ',    // U+2004
      "\xe2\x80\x85" => ' ',    // U+2005
      "\xe2\x80\x86" => ' ',    // U+2006
      "\xe2\x80\x87" => ' ',    // U+2007
      "\xe2\x80\x88" => ' ',    // U+2008
      "\xe2\x80\x89" => ' ',    // U+2009
      "\xe2\x80\x8a" => ' ',    // U+200A
      "\xe2\x80\x8b" => ' ',    // U+200B
      "\xe2\x80\x8c" => ' ',    // U+200C
      "\xe2\x80\x8d" => ' ',    // U+200D
      "\xe2\x80\x8e" => ' ',    // U+200E
      "\xe2\x80\x8f" => ' ',    // U+200F
      "\xe2\x80\x90" => '-',    // U+2010
      "\xe2\x80\x91" => '-',    // U+2011
      "\xe2\x80\x92" => '-',    // U+2012
      "\xe2\x80\x93" => '-',    // U+2013
      "\xe2\x80\x94" => '--',   // U+2014
      "\xe2\x80\x95" => '--',   // U+2015
      "\xe2\x80\x96" => '|',    // U+2016
      "\xe2\x80\x97" => '_',    // U+2017
      "\xe2\x80\x98" => "'",    // U+2018
      "\xe2\x80\x99" => "'",    // U+2019
      "\xe2\x80\x9a" => "'",    // U+201A
      "\xe2\x80\x9b" => "'",    // U+201B
      "\xe2\x80\x9c" => "'",    // U+201C
      "\xe2\x80\x9d" => "'",    // U+201D
      "\xe2\x80\x9e" => "'",    // U+201E
      "\xe2\x80\x9f" => "'",    // U+201F
      "\xe2\x80\xa0" => '+',    // U+2020
      "\xe2\x80\xa1" => '+',    // U+2021
      "\xe2\x80\xa2" => '*',    // U+2022
      "\xe2\x80\xa3" => '*',    // U+2023
      "\xe2\x80\xa4" => '.',    // U+2024
      "\xe2\x80\xa5" => '..',   // U+2025
      "\xe2\x80\xa6" => '...',  // U+2026
      "\xe2\x80\xa7" => '.',    // U+2027
      "\xe2\x80\xa8" => ' ',    // U+2028
      "\xe2\x80\xa9" => ' ',    // U+2029
      "\xe2\x80\xaa" => ' ',    // U+202A
      "\xe2\x80\xab" => ' ',    // U+202B
      "\xe2\x80\xac" => ' ',    // U+202C
      "\xe2\x80\xad" => ' ',    // U+202D
      "\xe2\x80\xae" => ' ',    // U+202E
      "\xe2\x80\xaf" => ' ',    // U+202F
      "\xe2\x80\xb0" => '%',    // U+2030
      "\xe2\x80\xb1" => '%',    // U+2031
      "\xe2\x80\xb2" => "'",    // U+2032
      "\xe2\x80\xb3" => "''",   // U+2033
      "\xe2\x80\xb4" => "'''",  // U+2034
      "\xe2\x80\xb5" => "'",    // U+2035
      "\xe2\x80\xb6" => "''",   // U+2036
      "\xe2\x80\xb7" => "'''",  // U+2037
      "\xe2\x80\xb8" => '^',    // U+2038
      "\xe2\x80\xb9" => '<',    // U+2039
      "\xe2\x80\xba" => '>',    // U+203A
      "\xe2\x80\xbb" => '*',    // U+203B
      "\xe2\x80\xbc" => '!!',   // U+203C
      "\xe2\x80\xbd" => '!?',   // U+203D
      "\xe2\x80\xbe" => '-',    // U+203E
      "\xe2\x80\xbf" => '_',    // U+203F
      "\xe2\x81\x80" => '-',    // U+2040
      "\xe2\x81\x81" => '^',    // U+2041
      "\xe2\x81\x82" => '***',  // U+2042
      "\xe2\x81\x83" => '-*',   // U+2043
      "\xe2\x81\x84" => '/',    // U+2044
      "\xe2\x81\x85" => '[',    // U+2045
      "\xe2\x81\x86" => ']',    // U+2046
      "\xe2\x81\x87" => '??',   // U+2047
      "\xe2\x81\x88" => '?!',   // U+2048
      "\xe2\x81\x89" => '!?',   // U+2049
      "\xe2\x81\x8a" => '|',    // U+204A
      "\xe2\x81\x8b" => '|',    // U+204B
      "\xe2\x81\x8c" => '*',    // U+204C
      "\xe2\x81\x8d" => '*',    // U+204D
      "\xe2\x81\x8e" => '*',    // U+204E
      "\xe2\x81\x8f" => ';',    // U+204F
      "\xe2\x81\x90" => '^',    // U+2050
      "\xe2\x81\x91" => '**',   // U+2051
      "\xe2\x81\x92" => '%',    // U+2052
      "\xe2\x81\x93" => '~',    // U+2053
      "\xe2\x81\x94" => '_',    // U+2054
      "\xe2\x81\x95" => '*',    // U+2055
      "\xe2\x81\x96" => '*:',   // U+2056
      "\xe2\x81\x97" => "''''", // U+2057
      "\xe2\x81\x98" => '::',   // U+2058
      "\xe2\x81\x99" => ':*:',  // U+2059
      "\xe2\x81\x9a" => ':',    // U+205A
      "\xe2\x81\x9b" => '*:*',  // U+205B
      "\xe2\x81\x9c" => '+',    // U+205C
      "\xe2\x81\x9d" => ':',    // U+205D
      "\xe2\x81\x9e" => ':',    // U+205E
      "\xe2\x81\x9f" => ' ',    // U+205F
      "\xe2\x81\xa0" => ' ',    // U+2060
      "\xe2\x81\xa1" => ' ',    // U+2061
      "\xe2\x81\xa2" => ' ',    // U+2062
      "\xe2\x81\xa3" => ' ',    // U+2063
      "\xe2\x81\xa4" => ' ',    // U+2064
      "\xe2\x81\xa5" => ' ',    // U+2065
      "\xe2\x81\xa6" => ' ',    // U+2066
      "\xe2\x81\xa7" => ' ',    // U+2067
      "\xe2\x81\xa8" => ' ',    // U+2068
      "\xe2\x81\xa9" => ' ',    // U+2069
      "\xe2\x81\xaa" => ' ',    // U+206A
      "\xe2\x81\xab" => ' ',    // U+206B
      "\xe2\x81\xac" => ' ',    // U+206C
      "\xe2\x81\xad" => ' ',    // U+206D
      "\xe2\x81\xae" => ' ',    // U+206E
      "\xe2\x81\xaf" => ' ',    // U+206F
      "\xe2\x81\xb0" => '0',    // U+2070
      "\xe2\x81\xb1" => 'i',    // U+2071
      "\xe2\x81\xb2" => '2',    // U+2072
      "\xe2\x81\xb3" => '3',    // U+2073
      "\xe2\x81\xb4" => '4',    // U+2074
      "\xe2\x81\xb5" => '5',    // U+2075
      "\xe2\x81\xb6" => '6',    // U+2076
      "\xe2\x81\xb7" => '7',    // U+2077
      "\xe2\x81\xb8" => '8',    // U+2078
      "\xe2\x81\xb9" => '9',    // U+2079
      "\xe2\x81\xba" => '+',    // U+207A
      "\xe2\x81\xbb" => '-',    // U+207B
      "\xe2\x81\xbc" => '=',    // U+207C
      "\xe2\x81\xbd" => '(',    // U+207D
      "\xe2\x81\xbe" => ')',    // U+207E
      "\xe2\x81\xbf" => 'n',    // U+207F
    ];
  }

  /**
   * An HTML entitiy to ASCII hash.
   *
   * @return array
   *   An HTML entitiy to ASCII hash.
   */
  protected static function xHtml() {
    return [
      '&Dagger;'      => '+',    // U+2021
      '&Prime;'       => "''",   // U+2033
      '&amp;'         => '&',
      '&apos;'        => "'",
      '&bdquo;'       => '"',    // U+201E
      '&bull;'        => '*',    // U+2022
      '&dagger;'      => '+',    // U+2020
      '&deg;'         => 'deg',  // U+00B0
      '&emsp;'        => '  ',   // U+2003
      '&ensp;'        => ' ',    // U+2002
      '&exclamation;' => '!',    // U+0021
      '&frasl;'       => '/',    // U+2044
      '&gt;'          => '>',    // U+003E
      '&hellip;'      => '...',  // U+2026
      '&laquo;'       => '<<',
      '&ldquo;'       => '"',    // U+201C
      '&lrm;'         => '->',   // U+200E
      '&lsaquo;'      => '<',    // U+2039
      '&lsquo;'       => "'",    // U+2018
      '&lt;'          => '<',    // U+003C
      '&mdash;'       => '--',   // U+2014
      '&nbsp;'        => ' ',
      '&ndash;'       => '-',    // U+2013
      '&oline;'       => '-',    // U+203E
      '&percent;'     => '%',    // U+0025
      '&permil;'      => '%',    // U+2030
      '&prime;'       => "'",    // U+2032
      '&quot;'        => '"',
      '&raquo;'       => '>>',
      '&reg;'         => '(R)',  // U+00AE
      '&rdquo;'       => '"',    // U+201D
      '&rlm;'         => '<-',   // U+200F
      '&rsaquo;'      => '>',    // U+203A
      '&rsquo;'       => "'",    // U+2019
      '&sbquo;'       => "'",    // U+201A
      '&thinsp;'      => ' ',    // U+2009
      '&trade;'       => '(TM)', // U+2212
      '&zwj;'         => '',     // U+200D
      '&zwnj;'        => '',     // U+200C
    ];
  }

  /**
   * ASCII to XML entities.
   *
   * @return array
   *   A UTF8 to similar ASCII hash.
   */
  protected static function xXml() {
    return [
      '&' => '&amp;',
      '`' => '&apos;',
      '>' => '&gt;',   // U+003E
      '<' => '&lt;',   // U+003C
      '"' => '&quot;',
    ];
  }

}
