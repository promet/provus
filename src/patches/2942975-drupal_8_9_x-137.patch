diff --git a/core/modules/layout_builder/config/schema/layout_builder.schema.yml b/core/modules/layout_builder/config/schema/layout_builder.schema.yml
index 862c90ecbe..f657f0ecc3 100644
--- a/core/modules/layout_builder/config/schema/layout_builder.schema.yml
+++ b/core/modules/layout_builder/config/schema/layout_builder.schema.yml
@@ -66,6 +66,12 @@ inline_block:
     block_serialized:
       type: string
       label: 'Serialized block'
+    type:
+      type: string
+      label: 'Block type'
+    uuid:
+      type: string
+      label: 'Block UUID'
 
 block.settings.inline_block:*:
   type: inline_block
diff --git a/core/modules/layout_builder/layout_builder.services.yml b/core/modules/layout_builder/layout_builder.services.yml
index b2ee1fe13e..4bd651a0ea 100644
--- a/core/modules/layout_builder/layout_builder.services.yml
+++ b/core/modules/layout_builder/layout_builder.services.yml
@@ -58,3 +58,14 @@ services:
     class: Drupal\layout_builder\Controller\LayoutBuilderHtmlEntityFormController
     public: false
     arguments: ['@layout_builder.controller.entity_form.inner']
+  layout_builder.normalizer.entity_display:
+    class: Drupal\layout_builder\Normalizer\LayoutEntityDisplayNormalizer
+    tags:
+      # Priority must be higher than serializer.normalizer.config_entity.
+      - { name: normalizer, priority: 1 }
+    arguments: ['@entity_type.manager', '@entity_type.repository', '@entity_field.manager']
+  layout_builder.normalizer.section_data:
+    class: Drupal\layout_builder\Normalizer\SectionDataNormalizer
+    tags:
+      # Priority must be higher than serializer.normalizer.typed_data.
+      - { name: normalizer, priority: 1 }
diff --git a/core/modules/layout_builder/src/Field/LayoutSectionItemList.php b/core/modules/layout_builder/src/Field/LayoutSectionItemList.php
index 3243be97a6..d92cbdc14b 100644
--- a/core/modules/layout_builder/src/Field/LayoutSectionItemList.php
+++ b/core/modules/layout_builder/src/Field/LayoutSectionItemList.php
@@ -101,7 +101,10 @@ public function equals(FieldItemListInterface $list_to_compare) {
    * @ingroup layout_builder_access
    */
   public function defaultAccess($operation = 'view', AccountInterface $account = NULL) {
-    // @todo Allow access in https://www.drupal.org/node/2942975.
+    if ($operation === 'view') {
+      return parent::defaultAccess($operation, $account);
+    }
+
     return AccessResult::forbidden();
   }
 
diff --git a/core/modules/layout_builder/src/LayoutBuilderServiceProvider.php b/core/modules/layout_builder/src/LayoutBuilderServiceProvider.php
index 71005ee48c..3b11198991 100644
--- a/core/modules/layout_builder/src/LayoutBuilderServiceProvider.php
+++ b/core/modules/layout_builder/src/LayoutBuilderServiceProvider.php
@@ -5,8 +5,6 @@
 use Drupal\Core\DependencyInjection\ContainerBuilder;
 use Drupal\Core\DependencyInjection\ServiceProviderInterface;
 use Drupal\layout_builder\EventSubscriber\SetInlineBlockDependency;
-use Drupal\layout_builder\Normalizer\LayoutEntityDisplayNormalizer;
-use Symfony\Component\DependencyInjection\ChildDefinition;
 use Symfony\Component\DependencyInjection\Definition;
 use Symfony\Component\DependencyInjection\Reference;
 
@@ -39,14 +37,6 @@ public function register(ContainerBuilder $container) {
       $definition->addTag('event_subscriber');
       $container->setDefinition('layout_builder.get_block_dependency_subscriber', $definition);
     }
-    if (isset($modules['serialization'])) {
-      $definition = (new ChildDefinition('serializer.normalizer.config_entity'))
-        ->setClass(LayoutEntityDisplayNormalizer::class)
-        // Ensure that this normalizer takes precedence for Layout Builder data
-        // over the generic serializer.normalizer.config_entity.
-        ->addTag('normalizer', ['priority' => 5]);
-      $container->setDefinition('layout_builder.normalizer.layout_entity_display', $definition);
-    }
   }
 
 }
diff --git a/core/modules/layout_builder/src/Normalizer/LayoutEntityDisplayNormalizer.php b/core/modules/layout_builder/src/Normalizer/LayoutEntityDisplayNormalizer.php
index 886304fa29..720767e1a4 100644
--- a/core/modules/layout_builder/src/Normalizer/LayoutEntityDisplayNormalizer.php
+++ b/core/modules/layout_builder/src/Normalizer/LayoutEntityDisplayNormalizer.php
@@ -3,6 +3,7 @@
 namespace Drupal\layout_builder\Normalizer;
 
 use Drupal\layout_builder\Entity\LayoutEntityDisplayInterface;
+use Drupal\layout_builder\Section;
 use Drupal\serialization\Normalizer\ConfigEntityNormalizer;
 
 /**
@@ -21,13 +22,26 @@ class LayoutEntityDisplayNormalizer extends ConfigEntityNormalizer {
   /**
    * {@inheritdoc}
    */
-  protected static function getDataWithoutInternals(array $data) {
-    $data = parent::getDataWithoutInternals($data);
-    // Do not expose the actual layout sections in normalization.
-    // @todo Determine what to expose here in
-    //   https://www.drupal.org/node/2942975.
-    unset($data['third_party_settings']['layout_builder']['sections']);
+  public function normalize($object, $format = NULL, array $context = []) {
+    $data = static::getDataWithoutInternals($object->toArray());
+    if (!empty($data['third_party_settings']['layout_builder']['sections'])) {
+      $sections = &$data['third_party_settings']['layout_builder']['sections'];
+      $sections = array_map(static function (Section $section) {
+        return $section->toArray();
+      }, $sections);
+    }
     return $data;
   }
 
+  /**
+   * {@inheritdoc}
+   */
+  public function denormalize($data, $class, $format = NULL, array $context = []) {
+    if (!empty($data['third_party_settings']['layout_builder']['sections'])) {
+      $sections = &$data['third_party_settings']['layout_builder']['sections'];
+      $sections = array_map([Section::class, 'fromArray'], $sections);
+    }
+    return parent::denormalize(static::getDataWithoutInternals($data), $class, $format, $context);
+  }
+
 }
diff --git a/core/modules/layout_builder/src/Normalizer/SectionDataNormalizer.php b/core/modules/layout_builder/src/Normalizer/SectionDataNormalizer.php
new file mode 100644
index 0000000000..5674439586
--- /dev/null
+++ b/core/modules/layout_builder/src/Normalizer/SectionDataNormalizer.php
@@ -0,0 +1,34 @@
+<?php
+
+namespace Drupal\layout_builder\Normalizer;
+
+use Drupal\layout_builder\Plugin\DataType\SectionData;
+use Drupal\layout_builder\Section;
+use Drupal\serialization\Normalizer\TypedDataNormalizer;
+use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
+
+/**
+ * Normalizes section data.
+ */
+class SectionDataNormalizer extends TypedDataNormalizer implements DenormalizerInterface {
+
+  /**
+   * {@inheritdoc}
+   */
+  protected $supportedInterfaceOrClass = SectionData::class;
+
+  /**
+   * {@inheritdoc}
+   */
+  public function normalize($object, $format = NULL, array $context = []) {
+    return $object->getValue()->toArray();
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function denormalize($data, $class, $format = NULL, array $context = []) {
+    return Section::fromArray($data);
+  }
+
+}
diff --git a/core/modules/layout_builder/src/Plugin/Block/InlineBlock.php b/core/modules/layout_builder/src/Plugin/Block/InlineBlock.php
index 01f64eb37f..1edbe61e2a 100644
--- a/core/modules/layout_builder/src/Plugin/Block/InlineBlock.php
+++ b/core/modules/layout_builder/src/Plugin/Block/InlineBlock.php
@@ -234,6 +234,10 @@ protected function getEntity() {
       if (!empty($this->configuration['block_serialized'])) {
         $this->blockContent = unserialize($this->configuration['block_serialized']);
       }
+      elseif (!empty($this->configuration['uuid'])) {
+        $entity = $this->entityTypeManager->getStorage('block_content')->loadByProperties(['uuid' => $this->configuration['uuid']]);
+        $this->blockContent = is_array($entity) ? array_pop($entity) : $entity;
+      }
       elseif (!empty($this->configuration['block_revision_id'])) {
         $entity = $this->entityTypeManager->getStorage('block_content')->loadRevision($this->configuration['block_revision_id']);
         $this->blockContent = $entity;
@@ -279,7 +283,11 @@ public function saveBlockContent($new_revision = FALSE, $duplicate_block = FALSE
       $block = unserialize($this->configuration['block_serialized']);
     }
     if ($duplicate_block) {
-      if (empty($block) && !empty($this->configuration['block_revision_id'])) {
+      if (empty($block) && !empty($this->configuration['uuid'])) {
+        $entity = $this->entityTypeManager->getStorage('block_content')->loadByProperties(['uuid' => $this->configuration['uuid']]);
+        $block = !empty($entity) ? current($entity) : NULL;
+      }
+      elseif (empty($block) && !empty($this->configuration['block_revision_id'])) {
         $block = $this->entityTypeManager->getStorage('block_content')->loadRevision($this->configuration['block_revision_id']);
       }
       if ($block) {
@@ -294,6 +302,8 @@ public function saveBlockContent($new_revision = FALSE, $duplicate_block = FALSE
       $block->save();
       $this->configuration['block_revision_id'] = $block->getRevisionId();
       $this->configuration['block_serialized'] = NULL;
+      $this->configuration['type'] = $block->bundle();
+      $this->configuration['uuid'] = $block->uuid();
     }
   }
 
diff --git a/core/modules/layout_builder/src/Plugin/DataType/SectionData.php b/core/modules/layout_builder/src/Plugin/DataType/SectionData.php
index 8783904d49..4352bae88c 100644
--- a/core/modules/layout_builder/src/Plugin/DataType/SectionData.php
+++ b/core/modules/layout_builder/src/Plugin/DataType/SectionData.php
@@ -30,8 +30,18 @@ class SectionData extends TypedData {
    * {@inheritdoc}
    */
   public function setValue($value, $notify = TRUE) {
+
+    if ($value && is_array($value)) {
+      $value = Section::fromArray($value);
+    }
+
     if ($value && !$value instanceof Section) {
-      throw new \InvalidArgumentException(sprintf('Value assigned to "%s" is not a valid section', $this->getName()));
+      if (isset($value->value) && !$value->value instanceof Section) {
+        throw new \InvalidArgumentException(sprintf('Value assigned to "%s" is not a valid section', $this->getName()));
+      }
+      else {
+        parent::setValue($value->value, $notify);
+      }
     }
     parent::setValue($value, $notify);
   }
diff --git a/core/modules/layout_builder/src/Section.php b/core/modules/layout_builder/src/Section.php
index 41fe13c57e..edea749412 100644
--- a/core/modules/layout_builder/src/Section.php
+++ b/core/modules/layout_builder/src/Section.php
@@ -337,9 +337,9 @@ public function toArray() {
     return [
       'layout_id' => $this->getLayoutId(),
       'layout_settings' => $this->getLayoutSettings(),
-      'components' => array_map(function (SectionComponent $component) {
+      'components' => array_values(array_map(function (SectionComponent $component) {
         return $component->toArray();
-      }, $this->getComponents()),
+      }, $this->getComponents())),
       'third_party_settings' => $this->thirdPartySettings,
     ];
   }
diff --git a/core/modules/layout_builder/tests/src/Functional/Hal/LayoutBuilderEntityViewDisplayHalJsonBasicAuthTest.php b/core/modules/layout_builder/tests/src/Functional/Hal/LayoutBuilderEntityViewDisplayHalJsonBasicAuthTest.php
index e008e042bd..011e97d96b 100644
--- a/core/modules/layout_builder/tests/src/Functional/Hal/LayoutBuilderEntityViewDisplayHalJsonBasicAuthTest.php
+++ b/core/modules/layout_builder/tests/src/Functional/Hal/LayoutBuilderEntityViewDisplayHalJsonBasicAuthTest.php
@@ -2,14 +2,14 @@
 
 namespace Drupal\Tests\layout_builder\Functional\Hal;
 
-use Drupal\FunctionalTests\Hal\EntityViewDisplayHalJsonAnonTest;
+use Drupal\Tests\layout_builder\Functional\Rest\LayoutBuilderEntityViewDisplayResourceTestBase;
 use Drupal\Tests\rest\Functional\BasicAuthResourceTestTrait;
 
 /**
  * @group layout_builder
  * @group rest
  */
-class LayoutBuilderEntityViewDisplayHalJsonBasicAuthTest extends EntityViewDisplayHalJsonAnonTest {
+class LayoutBuilderEntityViewDisplayHalJsonBasicAuthTest extends LayoutBuilderEntityViewDisplayResourceTestBase {
 
   use BasicAuthResourceTestTrait;
 
@@ -23,4 +23,9 @@ class LayoutBuilderEntityViewDisplayHalJsonBasicAuthTest extends EntityViewDispl
    */
   protected static $auth = 'basic_auth';
 
+  /**
+   * {@inheritdoc}
+   */
+  protected $defaultTheme = 'stark';
+
 }
diff --git a/core/modules/layout_builder/tests/src/Functional/Rest/LayoutBuilderEntityViewDisplayResourceTestBase.php b/core/modules/layout_builder/tests/src/Functional/Rest/LayoutBuilderEntityViewDisplayResourceTestBase.php
index 7da257f4a7..c6dd2f5d21 100644
--- a/core/modules/layout_builder/tests/src/Functional/Rest/LayoutBuilderEntityViewDisplayResourceTestBase.php
+++ b/core/modules/layout_builder/tests/src/Functional/Rest/LayoutBuilderEntityViewDisplayResourceTestBase.php
@@ -36,9 +36,37 @@ protected function getExpectedNormalizedEntity() {
     $expected = parent::getExpectedNormalizedEntity();
     array_unshift($expected['dependencies']['module'], 'layout_builder');
     $expected['hidden'][OverridesSectionStorage::FIELD_NAME] = TRUE;
+    /** @var \Drupal\layout_builder\Section[] $sections */
+    $sections = $this->entity->getThirdPartySetting('layout_builder', 'sections');
+    $components = $sections[0]->getComponents();
+    $component = array_pop($components);
     $expected['third_party_settings']['layout_builder'] = [
       'enabled' => TRUE,
       'allow_custom' => TRUE,
+      'sections' => [
+        [
+          'layout_id' => 'layout_onecol',
+          'layout_settings' => [
+            'label' => '',
+          ],
+          'components' => [
+            [
+              'uuid' => $component->getUuid(),
+              'region' => 'content',
+              'configuration' => [
+                'label_display' => '0',
+                'context_mapping' => [
+                  'entity' => 'layout_builder.entity',
+                ],
+                'id' => 'extra_field_block:node:camelids:links',
+              ],
+              'weight' => 0,
+              'additional' => [],
+            ],
+          ],
+          'third_party_settings' => [],
+        ],
+      ],
     ];
     return $expected;
   }
diff --git a/core/modules/layout_builder/tests/src/Unit/SectionDataNormalizerTest.php b/core/modules/layout_builder/tests/src/Unit/SectionDataNormalizerTest.php
new file mode 100644
index 0000000000..be271dd4f3
--- /dev/null
+++ b/core/modules/layout_builder/tests/src/Unit/SectionDataNormalizerTest.php
@@ -0,0 +1,95 @@
+<?php
+
+namespace Drupal\Tests\layout_builder\Unit;
+
+use Drupal\Core\Field\FieldItemInterface;
+use Drupal\Core\TypedData\DataDefinitionInterface;
+use Drupal\layout_builder\Normalizer\SectionDataNormalizer;
+use Drupal\layout_builder\Plugin\DataType\SectionData;
+use Drupal\layout_builder\Section;
+use Drupal\Tests\UnitTestCase;
+
+/**
+ * @coversDefaultClass \Drupal\layout_builder\Normalizer\SectionDataNormalizer
+ * @group layout_builder
+ */
+class SectionDataNormalizerTest extends UnitTestCase {
+
+  /**
+   * The normalizer.
+   *
+   * @var \Drupal\layout_builder\Normalizer\SectionDataNormalizer
+   */
+  protected $normalizer;
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function setUp(): void {
+    parent::setUp();
+    $this->normalizer = new SectionDataNormalizer();
+  }
+
+  /**
+   * @covers ::supportsNormalization
+   */
+  public function testSupportsNormalization() {
+    $section_data = $this->prophesize(SectionData::class);
+    $this->assertTrue($this->normalizer->supportsNormalization($section_data->reveal()));
+  }
+
+  /**
+   * @covers ::supportsDenormalization
+   */
+  public function testSupportsDenormalization() {
+    $this->assertTrue($this->normalizer->supportsDenormalization([], SectionData::class));
+  }
+
+  /**
+   * Tests the normalize function.
+   *
+   * @covers ::normalize
+   */
+  public function testNormalize() {
+    $data = ['foo'];
+    $section_data = $this->prophesize(SectionData::class);
+    $section = $this->prophesize(Section::class);
+    $section->toArray()
+      ->willReturn($data);
+    $section_data->getValue()
+      ->willReturn($section);
+    $this->assertArrayEquals($data, $this->normalizer->normalize($section_data->reveal()));
+  }
+
+  /**
+   * Tests the denormalize function.
+   *
+   * @covers ::denormalize
+   */
+  public function testDenormalize() {
+    $data = [
+      'layout_id' => $this->randomMachineName(),
+      'layout_settings' => [
+        'label' => $this->randomMachineName(),
+      ],
+      'components' => [],
+      'third_party_settings' => [],
+    ];
+    $target_instance = $this->prophesize(FieldItemInterface::class);
+    $target_instance->getDataDefinition()
+      ->willReturn($this->prophesize(DataDefinitionInterface::class));
+    $context = [
+      'target_instance' => [
+        $target_instance,
+      ],
+    ];
+    /** @var \Drupal\layout_builder\Section $section_data */
+    $section_data = $this->normalizer->denormalize($data, SectionData::class, $context);
+    $this->assertEquals($data['layout_id'], $section_data->getLayoutId());
+    $this->assertEquals($data['components'], $section_data->getComponents());
+    foreach ($section_data->getThirdPartyProviders() as $provider) {
+      $this->assertEquals($data['third_party_settings'], $section_data->getThirdPartySettings($provider));
+    }
+  }
+
+}
diff --git a/core/profiles/demo_umami/config/install/core.entity_view_display.node.recipe.full.yml b/core/profiles/demo_umami/config/install/core.entity_view_display.node.recipe.full.yml
index eddea371d1..4134bcf11b 100644
--- a/core/profiles/demo_umami/config/install/core.entity_view_display.node.recipe.full.yml
+++ b/core/profiles/demo_umami/config/install/core.entity_view_display.node.recipe.full.yml
@@ -31,7 +31,7 @@ third_party_settings:
         layout_settings:
           label: ''
         components:
-          eadd557c-6414-40e5-9a95-355720385477:
+          -
             uuid: eadd557c-6414-40e5-9a95-355720385477
             region: content
             configuration:
@@ -47,7 +47,7 @@ third_party_settings:
                 type: entity_reference_label
             additional: {  }
             weight: 3
-          0eff9e1d-4e73-4748-b910-e5568df1d5aa:
+          -
             uuid: 0eff9e1d-4e73-4748-b910-e5568df1d5aa
             region: content
             configuration:
@@ -63,7 +63,7 @@ third_party_settings:
                 type: entity_reference_label
             additional: {  }
             weight: 2
-          44801518-fe93-421a-bdcb-550493c7925d:
+          -
             uuid: 44801518-fe93-421a-bdcb-550493c7925d
             region: content
             configuration:
@@ -84,7 +84,7 @@ third_party_settings:
         layout_settings:
           label: ''
         components:
-          cc87463d-bb75-4eca-a2d0-42f0b643f8a7:
+          -
             uuid: cc87463d-bb75-4eca-a2d0-42f0b643f8a7
             region: content
             configuration:
@@ -103,7 +103,7 @@ third_party_settings:
                 view_mode: view_mode
             additional: {  }
             weight: 4
-          df8bfafc-210c-4d86-9745-e47081ab0fd4:
+          -
             uuid: df8bfafc-210c-4d86-9745-e47081ab0fd4
             region: fifth
             configuration:
@@ -118,7 +118,7 @@ third_party_settings:
                 type: list_default
             additional: {  }
             weight: 0
-          a2d450d0-08ce-4123-bca0-411bfa1da132:
+          -
             uuid: a2d450d0-08ce-4123-bca0-411bfa1da132
             region: fourth
             configuration:
@@ -135,7 +135,7 @@ third_party_settings:
                 type: number_integer
             additional: {  }
             weight: 0
-          f91febc6-d924-47a2-8ffd-b71d3b2597c7:
+          -
             uuid: f91febc6-d924-47a2-8ffd-b71d3b2597c7
             region: third
             configuration:
@@ -152,7 +152,7 @@ third_party_settings:
                 type: number_integer
             additional: {  }
             weight: 0
-          00488840-db50-4afe-9c30-a123e6707fa9:
+          -
             uuid: 00488840-db50-4afe-9c30-a123e6707fa9
             region: second
             configuration:
@@ -169,7 +169,7 @@ third_party_settings:
                 type: number_integer
             additional: {  }
             weight: 0
-          69d8bce1-28ae-4287-a05b-a2166679f867:
+          -
             uuid: 69d8bce1-28ae-4287-a05b-a2166679f867
             region: first
             configuration:
@@ -195,7 +195,7 @@ third_party_settings:
           label: ''
           column_widths: 33-67
         components:
-          6924bf2e-8baa-4081-803a-7a2d3b7d8e14:
+          -
             uuid: 6924bf2e-8baa-4081-803a-7a2d3b7d8e14
             region: first
             configuration:
@@ -211,7 +211,7 @@ third_party_settings:
                 type: string
             additional: {  }
             weight: 0
-          f61cae40-5865-4c4c-98fa-14b8234e7b98:
+          -
             uuid: f61cae40-5865-4c4c-98fa-14b8234e7b98
             region: second
             configuration:
@@ -232,7 +232,7 @@ third_party_settings:
         layout_settings:
           label: ''
         components:
-          d4b753a7-e1b1-4062-a1d0-a2666362693e:
+          -
             uuid: d4b753a7-e1b1-4062-a1d0-a2666362693e
             region: content
             configuration:
