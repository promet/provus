<?php

/**
 * @file
 * Functions to support theming in the Pattern Lab theme.
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Block\BlockPluginInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Template\Attribute;
use Drupal\Core\Url;
use Drupal\file\Entity\File;
use Drupal\image\Entity\ImageStyle;
use Drupal\Component\Utility\UrlHelper;
use Drupal\views\Views;
use Drupal\Core\Plugin\PluginBase;

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function provus_theme_suggestions_container_alter(&$suggestions, $vars) {
  $name = '';
  $type = '';
  if (isset($vars['element']['#name'])) {
    $name = $vars['element']['#name'];
  }

  if (isset($vars['element']['#type'])) {
    $type = $vars['element']['#type'];
  }

  array_unshift($suggestions, 'container__' . $type . '__' . $name);
  return $suggestions;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function provus_preprocess_page_title(&$variables) {
  if (_provus_current_path() == 'search') {
    $variables['title'] = '';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function provus_form_search_block_form_alter(&$form, FormStateInterface $form_state){
  unset($form['actions']);
  $form['reset'] = [
    '#type' => 'html_tag',
    '#tag' => 'input',
    '#attributes' => [
      'type' => 'reset',
      'value' => 'Reset',
    ],
  ];
}

/**
 * Implements hook_preprocess_node().
 */
function provus_preprocess_node(&$vars) {
  // Remove redundant aria role.
  unset($vars['attributes']['role']);
  // Format default date with specific format.
  switch ($vars['view_mode']) {
    case 'card_event':
      $date_format = 'county_longer';
      break;
    case 'search_result':
      $vars['content']['search_result'] = _provus_search_result($vars);
      $date_format = 'county_default';
      break;
    default:
      $date_format = 'county_default';
      break;
  }
  $vars['date'] = format_date($vars['node']->getCreatedTime(), $date_format);
  // For nodes using the publish date in certain view modes, put the publish
  // date into the date var.
  if (array_key_exists('field_publish_date', $vars['content']) && Element::children($vars['content']['field_publish_date'])) {
    $vars['date'] = $vars['content']['field_publish_date'];
  }
  // For events, put the start date into the date var.
  if (array_key_exists('field_start_date', $vars['content']) && Element::children($vars['content']['field_start_date'])) {
    $vars['date'] = $vars['content']['field_start_date'];
  }

  // Update date vars so we can properly show the add to calendar for recurring events.
  if ($vars['node']->getType() == 'event') {
    $start_date = new DateTime($vars['node']->field_start_date->getString(), new DateTimeZone('UTC'));
    $start_date->setTimezone(new DateTimeZone('America/Los_Angeles'));
    $end_date = new DateTime($vars['node']->field_end_date->getString(), new DateTimeZone('UTC'));
    $end_date->setTimezone(new DateTimeZone('America/Los_Angeles'));

    // Prepare for updates if recurring.
    $weekly_value = $vars['node']->field_weekly_event->getValue();
    $weekly = isset($weekly_value[0]['value']) ? $weekly_value[0]['value'] : FALSE;
    $monthly_value = $vars['node']->field_monthly_event->getValue();
    $monthly = isset($monthly_value[0]['value']) ? $monthly_value[0]['value'] : FALSE;
    // Updates both start_date and end_date before updating vars.
    _provus_get_next_event_date($start_date, $end_date, $weekly, $monthly);
    
    $vars['event_start_date'] = $start_date;
    $vars['event_end_date'] = $end_date;
    if ($weekly || $monthly || ($start_date->format('D, F j, Y') == $end_date->format('D, F j, Y'))) {
      // For weekly, monthly, and same day events, display start and end times
      // together and separate line as day.
      $vars['event_date_day_formatted'] = $start_date->format('D, F j, Y');
      $vars['event_date_time_formatted'] = $start_date->format('g:i a') . ' - ' . $end_date->format('g:i a') . ' PST';
    }
    else {
      // For a multiday event, display both start and end dates separately.
      $vars['event_date_day_formatted'] = $start_date->format('D, F j, Y g:i a') . ' thru';
      $vars['event_date_time_formatted'] = $end_date->format('D, F j, Y g:i a') . ' PST';
    }

    // Get referenced location node if available.
    $location = $vars['node']->field_location->getValue();
    // Special processing for field_address on location when there are multiple.
    if (!empty($location[1])) {
      $vars['multiple_locations'] = TRUE;
      $vars['location_map_url'] = FALSE;
    }
    else {
      $vars['multiple_locations'] = FALSE;
      $vars['location_map_url'] = !empty($location[0]['target_id']) ? '/node/' . $location[0]['target_id'] . '#geofield-map-node-location-' . $location[0]['target_id'] . '-field-lat-long' : FALSE;
    }
  }

  if ($vars['node']->getType() == 'location') {
    // Get address in a string format for google directions link.
    $address_string = '';
    $address_fields = $vars['node']->field_address->getValue();
    $address_string .= !empty($address_fields[0]['address_line1']) ? ' ' . $address_fields[0]['address_line1'] : '';
    $address_string .= !empty($address_fields[0]['address_line2']) ? ' ' . $address_fields[0]['address_line2'] : '';
    $address_string .= !empty($address_fields[0]['locality']) ? ' ' . $address_fields[0]['locality'] : '';
    $address_string .= !empty($address_fields[0]['admministrative_area']) ? ' ' . $address_fields[0]['admministrative_area'] : '';
    $address_string .= !empty($address_fields[0]['postal_code']) ? ' ' . $address_fields[0]['postal_code'] : '';
    $address_string .= !empty($address_fields[0]['country_code']) ? ' ' . $address_fields[0]['country_code'] : '';
    $vars['address_string'] = trim($address_string);
    // If this is a location, put notranslate on title class.
    $vars['title_attributes']['class'][] = 'notranslate';
  }

  if ($vars['node']->getType() == 'faq') {
    $view_builder = \Drupal::entityTypeManager()->getViewBuilder('block_content');
    $storage = \Drupal::entityTypeManager()->getStorage('block_content');
    $id_array = $vars['node']->get('field_faq_items')->getValue();
    if (!empty($id_array)) {
      foreach ($id_array as $key => $id) {
        $entity = $storage->load($id['target_id']);
        if (!empty($entity)) {
          $block_build['content'] = $view_builder->view($entity, 'default');
          $block_build['content']['#view_mode'] = 'default';
          provus_get_block($block_build, $entity);
        }
      }
      $vars['faq_block'] = $block_build;
    }
  }

  if ($vars['node']->getType() == 'person') {
    // Get initials from first and last names.
    $vars['initials'] = '';
    $fname_field = $vars['node']->field_first_name->getValue();
    $lname_field = $vars['node']->field_last_name->getValue();
    $vars['initials'] .= !empty($fname_field[0]['value']) ? substr($fname_field[0]['value'], 0, 1) : '';
    $vars['initials'] .= !empty($lname_field[0]['value']) ? substr($lname_field[0]['value'], 0, 1) : '';
  }
}

/**
 * Updates start and end dates for recurring events if needed.
 */
function _provus_get_next_event_date(&$start_date, &$end_date, $weekly_day, $monthly_day) {
  $today = new DateTime();
  $today->setTimezone(new DateTimeZone('America/Los_Angeles'));

  if ($weekly_day !== FALSE) {
    $weekday_names = [
      'Sunday',
      'Monday',
      'Tuesday',
      'Wednesday',
      'Thursday',
      'Friday',
      'Saturday',
    ];
    // Is the event day today?
    if ($weekly_day <> $today->format('N')) {
      // Get next week day.
      $today->modify('next ' . $weekday_names[$weekly_day]);
    }
    $event_date = _provus_check_event_is_in_range($today, $start_date, $end_date);
    $start_time = $start_date->format(' H:i:s');
    $end_time = $end_date->format(' H:i:s');
    $start_date = new DateTime($event_date->format('Y-m-d') . $start_time);
    $end_date = new DateTime($event_date->format('Y-m-d') . $end_time);
    return;
  }

  if ($monthly_day !== FALSE) {
    if ($monthly_day == $today->format('d')) {
      // Event is today.
      $event_date = $today;
    }
    elseif ($monthly_day > $today->format('d')) {
      // The event is later this month.
      $event_date = new DateTime($today->format('Y-m-') . $monthly_day);
    }
    else {
      // Next month event.
      $event_date = new DateTime($today->format('Y-m-') . $monthly_day);
      $event_date->modify("next month");
    }

    $event_date = _provus_check_event_is_in_range($event_date, $start_date, $end_date);

    $start_time = $start_date->format(' H:i:s');
    $end_time = $end_date->format(' H:i:s');
    $start_date = new DateTime($event_date->format('Y-m-d') . $start_time);
    $end_date = new DateTime($event_date->format('Y-m-d') . $end_time);
    return;
  }
}

/**
 * Checks if an event is inside a date range.
 *
 * Returns the last valid DateTime.
 */
function _provus_check_event_is_in_range(DateTime $date, DateTime $event_start_date, DateTime $event_end_date) {
  if ($date < $event_start_date || ($date > $event_start_date && $date < $event_end_date)) {
    return $date;
  }
  return $event_end_date;
}

/**
 * Implements hook_preprocess_views_view().
 */
function provus_preprocess_views_view(&$vars) {
  $view = $vars['view'];

  switch ($view->id()) {

    // Determine block visibility.
    case 'site_alert':
      if ($view->current_display != 'alert_site_block_1') {
        break;
      }
      $route = Url::fromRoute('<current>');
      $alias = preg_replace('/^\//', '', $route->toString());
      $url = $route->getInternalPath();
      $rows = &$vars['rows'][0]['#rows'];

      if (empty($rows)) {
        break;
      }

      foreach ($rows as $i => $row) {
        $display = TRUE;
        $paths = !empty($row['#row']->_entity->field_alert_visibility) ? $row['#row']->_entity->get('field_alert_visibility')->value : '';

        if (!empty($paths)) {
          $display = FALSE;
          foreach (preg_split('/\s+/s', $paths) as $path) {
            $path = preg_replace('/^\/+/', '', $path);

            if (!strpos($path, '*') && ($path == $url || $path == $alias)) {
              $display = TRUE;
              break;
            }
            elseif (strpos($alias, trim($path, '*')) === 0) {
              $display = TRUE;
              break;
            }
            elseif ($path == '<front>' && \Drupal::service('path.matcher')->isFrontPage()) {
              // Special case for front.
              $display = TRUE;
              break;
            }
          }
          if (!$display) {
            unset($rows[$i]);
          }
        }
      }
      break;
  }
}

/**
 * Implements hook_preprocess_views_view_unformatted().
 */
function provus_preprocess_views_view_unformatted(&$vars) {
  // Make sure the referenced blocks run through theme later.
  if ($vars['view']->id() == 'block_content_list') {
    $row_options = $vars['view']->display_handler->getOption('row');
    $vars['view_mode'] = $row_options['options']['view_mode'];
    foreach ($vars['rows'] as $key => $item) {
      if (!empty($item['content']['#block_content'])) {
        $vars['rows'][$key]['block_title'] = $item['content']['#block_content']->label();
        $vars['rows'][$key]['block_id'] = $item['content']['#block_content']->id();
      }
    }
  }
}

/**
 * Implements hook_preprocess_region__header().
 */
function provus_preprocess_region__header(&$vars) {
  $default = drupal_get_path('theme', 'provus') . '/images/logo-occ.png';
  $vars['relative_logo_url'] = theme_get_setting('logo.url') ? file_url_transform_relative(file_create_url(theme_get_setting('logo.url'))) : $default;
  $vars['site_name'] = \Drupal::config('system.site')->get('name');
}

/**
 * Implements hook_preprocess_input().
 */
function provus_preprocess_input(&$vars) {
  if ($vars['element']['#type'] == 'submit') {
    $vars['button_type'] = 'button--primary';
  }
}

/**
 * Get block build.
 */
function provus_get_block(&$block_build, $entity) {
  // TODO: Can we pass the view mode here?
  $configuration = [
    'label' => $entity->label(),
    'label_display' => BlockPluginInterface::BLOCK_LABEL_VISIBLE
  ];
  $block_uuid = 'block_content:' . $entity->uuid();
  $block_plugin = \Drupal::service('plugin.manager.block')
    ->createInstance($block_uuid, $configuration);
  $block_build += [
    '#theme' => 'block',
    '#attributes' => [],
    '#contextual_links' => [],
    '#configuration' => $block_plugin->getConfiguration(),
    '#plugin_id' => $block_uuid,
    '#base_plugin_id' => 'block_content',
    '#derivative_plugin_id' => $entity->uuid(),
  ];
  $block_build['content']['#ischild'] = TRUE;
}

/**
 * Gets search result.
 */
function _provus_search_result($vars) {
  if (array_key_exists('search_api_excerpt', $vars['content'])) {
     _prepare_teaser_search($vars);
    return $vars['content']['search_api_excerpt'];
  }
  else if (_provus_field_exists('body', $vars['content'])) {
    return $vars['content']['body'];
  }
  return '';
}

/**
 * Prepare cache settings for teaser_search view modes.
 */
function _prepare_teaser_search(&$vars, $type = 'node') {
  $vars['#cache']['contexts'][] = 'url.query_args:keys';
  if (isset($vars[$type])) {
    $vars['#cache']['tags'] = $vars[$type]->getCacheTags();
  }
}

/**
 * Get current path.
 */
function _provus_current_path() {
  $current_path = \Drupal::service('path.current')->getPath();
  $result = \Drupal::service('path.alias_manager')->getAliasByPath($current_path);
  return trim($result, '/');
}

/**
 * Implements template_preprocess_region().
 *
 * Change Region Titles for Facet Filters.
 */
function provus_preprocess_region(array &$vars) {
  $vars['region_title'] = '';
  $vars['search'] = FALSE;

  if ($vars['region'] == 'sidebar') {
    if (_provus_current_path() == 'search') {
      $vars['search'] = TRUE;
      $vars['title'] = t('Search');
      $vars['region_title'] = t('Filter Results');
      $url = Url::fromRoute('<current>', []);
      $vars['clear_filter'] = [
        '#type' => 'inline_template',
        '#template' => '{% include "@atoms/buttons/twig/button-clear.twig" %}',
        '#context' => [
          'attributes' => new Attribute([
            'class' => ['button-clear'],
          ]),
          'button_blockname' => 'search',
          'button_content' => t('Clear All Filters'),
          'button_url' => $url,
        ]
      ];
    }
  }
}

/**
 * Determines whether field exists.
 */
function _provus_field_exists($name, $content) {
  return array_key_exists($name, $content) && Element::children($content[$name]);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function provus_form_views_exposed_form_alter(&$form) {
  if ($form['#id'] == 'views-exposed-form-search-page-1') {
    // Overrides the "submit is always secondary".
    $form['actions']['submit']['#attributes']['class'] = ['button--primary'];
    $query = UrlHelper::filterQueryParameters(\Drupal::request()->query
      ->all());
    // Retains query.
    $form['#params'] = isset($query['f']) ? $query['f'] : '';
  }
}

/**
 * Implements hook_preprocess_menu().
 */
function provus_preprocess_menu(&$vars) {
  // Adjust main menu so that it respects 'expanded' config set on the item.
  if ($vars['menu_name'] == 'main' && !empty($vars['menu_block_configuration']) && $vars['menu_block_configuration']['expand'] == FALSE) {
    foreach ($vars['items'] as $id => $item) {
      $vars['items'][$id] = _provus_mainmenu_set_expanded($item, $id);
      if (!empty($vars['items'][$id]['below'])) {
        foreach ($vars['items'][$id]['below'] as $subid => $subitem) {
          $vars['items'][$id]['below'][$subid] = _provus_mainmenu_set_expanded($subitem, $subid);
          if (!empty($vars['items'][$id]['below'][$subid]['below'])) {
            foreach ($vars['items'][$id]['below'][$subid]['below'] as $subsubid => $subsubitem) {
              $vars['items'][$id]['below'][$subid]['below'][$subsubid] = _provus_mainmenu_set_expanded($subsubitem, $subsubid);
            }
          }
        }
      }
    }
  }
}

/**
 * Set main menu expanded.
 */
function _provus_mainmenu_set_expanded($item, $id) {
  if ($item['in_active_trail']) {
    list($bundle, $uuid) = explode(':', $id);
    // Set expanded setting from item.
    $menu_link_content_entity = \Drupal::entityManager()
      ->loadEntityByUuid($bundle, $uuid);
    $item['is_expanded'] = $menu_link_content_entity->isExpanded();
    if (!$item['is_expanded']) {
      unset($item['below']);
    }
  }
  return $item;
}
